// Generated by CodiumAI
import { expect, it, describe } from 'vitest'
import { isPalindrome } from './9. Palindrome Number'
describe('isPalindrome', () => {

    // Returns true for a single digit number
    it('should return true when the input is a single digit number', () => {
        const result = isPalindrome(5);
        expect(result).toBe(true);
    });

    // Returns true for a palindrome number with even digits
    it('should return true when the input is a palindrome number with even digits', () => {
        const result = isPalindrome(1221);
        expect(result).toBe(true);
    });

    // Returns true for a palindrome number with odd digits
    it('should return true when the input is a palindrome number with odd digits', () => {
        const result = isPalindrome(12321);
        expect(result).toBe(true);
    });

    // Returns true for 0
    it('should return true when the input is 0', () => {
        const result = isPalindrome(0);
        expect(result).toBe(true);
    });

    // Returns true for the maximum safe integer value
    it('should return true when the input is the maximum safe integer value', () => {
        const result = isPalindrome(Number.MAX_SAFE_INTEGER);
        expect(result).toBe(false);
    });

    // Returns false for the maximum safe integer value + 1
    it('should return false when the input is the maximum safe integer value + 1', () => {
        const result = isPalindrome(Number.MAX_SAFE_INTEGER + 1);
        expect(result).toBe(false);
    });
});
