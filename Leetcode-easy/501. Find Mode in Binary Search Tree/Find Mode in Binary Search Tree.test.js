// Generated by CodiumAI
import { expect, it, describe } from 'vitest'
import { findMode } from './501. Find Mode in Binary Search Tree'
describe('findMode', () => {

    // The function returns an array of the most frequent values in the binary tree.
    it('should return an array of the most frequent values in the binary tree', () => {
        const root = {
            val: 1,
            left: {
                val: 2,
                left: null,
                right: null
            },
            right: {
                val: 3,
                left: null,
                right: null
            }
        };
        const result = findMode(root);
        expect(result).toEqual([1, 2, 3]);
    });

    // The function works correctly with a binary tree of size 1.
    it('should return an array with the single value in the binary tree', () => {
        const root = {
            val: 1,
            left: null,
            right: null
        };
        const result = findMode(root);
        expect(result).toEqual([1]);
    });

    // The function works correctly with a binary tree of size 2.
    it('should return an array with the two values in the binary tree', () => {
        const root = {
            val: 1,
            left: {
                val: 2,
                left: null,
                right: null
            },
            right: null
        };
        const result = findMode(root);
        expect(result).toEqual([1, 2]);
    });

    // The function works correctly with an empty binary tree.
    it('should return an empty array for an empty binary tree', () => {
        const root = null;
        const result = findMode(root);
        expect(result).toEqual([]);
    });

    // The function works correctly with a binary tree containing only one value.
    it('should return an array with the single value in the binary tree', () => {
        const root = {
            val: 1,
            left: null,
            right: null
        };
        const result = findMode(root);
        expect(result).toEqual([1]);
    });

    // The function works correctly with a binary tree containing only two values.
    it('should return an array with the two values in the binary tree', () => {
        const root = {
            val: 1,
            left: null,
            right: {
                val: 2,
                left: null,
                right: null
            }
        };
        const result = findMode(root);
        expect(result).toEqual([1, 2]);
    });
});
