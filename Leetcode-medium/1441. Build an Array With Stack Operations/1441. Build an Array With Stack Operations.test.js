import { expect, it, describe } from 'vitest'
import { buildArray } from './1441. Build an Array With Stack Operations'

// Generated by CodiumAI
// Generated by CodiumAI

describe('buildArray', () => {

    // Should return an empty array if target array is empty
    it('should return an empty array when target array is empty', () => {
      const target = [];
      const n = 5;
      const expected = [];
      const result = buildArray(target, n);
      expect(result).toEqual(expected);
    });

    // Should return an array of only 'Push' operations if target array is [1,2,3,...,n]
    it('should return an array of only push operations when target array is [1,2,3,...,n]', () => {
      const target = [1, 2, 3, 4, 5];
      const n = 5;
      const expected = ['Push', 'Push', 'Push', 'Push', 'Push'];
      const result = buildArray(target, n);
      expect(result).toEqual(expected);
    });

    // Should handle target array with positive numbers and return the correct sequence of operations
    it('should handle target array with positive numbers', () => {
          const target = [1, 3, 5];
          const n = 5;
          const expected = ['Push', 'Push', 'Pop', 'Push', 'Push', 'Pop', 'Push'];
          const result = buildArray(target, n);
          expect(result).toEqual(expected);
        });

    // Should handle target array with numbers greater than n
    it('should handle target array with numbers greater than n', () => {
      const target = [6, 7, 8];
      const n = 5;
      const expected = ['Push', 'Pop','Push', 'Pop','Push', 'Pop','Push', 'Pop','Push', 'Pop','Push','Push','Push'];
      const result = buildArray(target, n);
      expect(result).toEqual(expected);
    });
});
